# 구독을 이용한 모듈 상태 공유

모듈 상태란?
하나의 파일 안에 정의된 변수나 상수를 의미합니다. 이 변수와 상수는 해당 파일(모듈)내에서만 사용될 수 있고, 다른 파일에서는 바로 접근할 수 없습니다. 즉, 그 파일 안에서만 상태가 유지되는 일종의 로컬 변수 같은 개념이다.

```js
// counter.js 파일 (모듈)
let count = 0; // 이 변수는 counter.js 파일(모듈) 안에서만 사용 가능해요.
```

여기서 count 변수는 counter.js 파일 안에서만 사용 가능합니다. 다른 파일에서는 바로 접근할 수 없습니다. 이렇게 모듈 내에서만 상태를 유지하는 변수나 상수를 모듈 상태라고 합니다.
만약 다른 파일에서 사용하려면 export 키워드로 내보내서 import해야 합니다.

## 라액트에서 전역 상태를 다루기 위한 모듈 상태 사용법

전체 애플리케이션에서 공통으로 사용해야 하는 값이 아니라면, 모듈에 정의된 상태(변수)를 사용하는 것이 더 나을 수 있어요. 하지만 React 컴포넌트 안에서 모듈 상태를 사용하려면, 컴포넌트가 변경된 상태를 감지하지 못할 수 있기 때문에 리렌더링을 직접 신경 써서 처리해야 합니다.

즉, 모듈 상태는 특정 파일 안에서만 사용하는 상태이기 때문에 React의 자동 리렌더링 기능이 적용되지 않아요. 이 때문에 상태가 바뀌어도 화면이 자동으로 업데이트되지 않으니, React 컴포넌트가 상태 변경을 인식할 수 있도록 직접 최적화 작업을 해야 한다는 의미입니다.

### 기초적인 구독 추가하기

구독이란?
구독(Subscription)이란 상태나 데이터가 변경될 때 이를 감지하고, 필요한 함수를 실행하는 메커니즘입니다.

```ts
const createStore = <T extends unknown>(initialState: T): Store<T> => {
  let state = initialState;
  const callbacks = new Set<() => void>();

  // 상태를 반환하는 함수
  const getState = () => state;

  // 상태를 업데이트하고, 모든 구독자에게 알림
  const setState = (nextState: T | ((prev: T) => T)) => {
    state =
      typeof nextState === "function"
        ? (nextState as (prev: T) => T)(state)
        : nextState;
    callbacks.forEach((callback) => callback());
  };

  // 상태 변경 시 호출할 콜백 함수를 등록하는 구독 함수
  const subscribe = (callback: () => void) => {
    callbacks.add(callback);
    return () => {
      callbacks.delete(callback);
    };
  };

  return { getState, setState, subscribe };
};
```

```ts
const useStore = (store) => {
  const [state, setState] = useState(store.getState());

  useEffect(() => {
    // 상태 변경 시 호출될 콜백 함수 등록
    const unsubscribe = store.subscribe(() => {
      setState(store.getState());
    });

    setState(store.getState()); // 초기 상태 설정
    return unsubscribe; // 컴포넌트 언마운트 시 구독 해제
  }, [store]);

  return [state, store.setState];
};
```

1. createStore와 같은 함수를 사용해 전역 상태를 정의하고, 이를 컴포넌트에서 사용하기 위한 사용자 정의 훅 useStore를 제공합니다.
2. subscribe와 unsubscribe를 통해 상태 변경을 구독하고, 상태가 변경될 때 등록된 모든 콜백 함수가 실행되어 컴포넌트의 상태가 업데이트됩니다.
3. createStore 함수는 상태 관리의 기본적인 기능들을 추상화하여 제공하고, useStore 훅은 이를 React의 useState와 결합하여 쉽게 사용할 수 있도록 만들어줍니다.
4. Redux와 같은 전역 상태 관리 라이브러리를 직접 구현하여 React 컴포넌트 간에 상태를 공유하고, 상태가 변경될 때 자동으로 리렌더링을 발생시키는 메커니즘을 보여줍니다.

### 선택자와 useSubscription 사용하기

이전 코드의 문제점은 useStore 훅이 상태 객체 전체를 반환한다는 점입니다. 이로 인해 상태의 일부분만 변경되더라도 useStore를 사용하는 모든 컴포넌트가 리렌더링된다는 문제가 발생합니다. 예를 들어, 상태 객체가 { count: 0, text: '' }와 같은 구조라면, count 값만 변경되어도 text 값을 사용하고 있는 컴포넌트도 불필요하게 리렌더링됩니다.

이를 해결하기 위해, React의 useSubscription 패턴을 도입하여 상태의 특정 부분만 구독하고, 해당 부분이 변경될 때만 컴포넌트가 리렌더링되도록 설정할 수 있습니다. useSubscription 패턴을 통해 리렌더링을 최적화하고, 상태 변경에 따른 불필요한 렌더링을 방지할 수 있습니다.

선택자(Selector)란?
상태 관리에서 특정 상태의 일부를 선택하고, 그 부분만을 추출하여 반환하는 함수입니다. 선택자는 주로 전역 상태 관리 라이브러리나 상태 관리 시스템에서 상태의 특정 부분만 가져오거나, 상태의 특정 값을 변형하여 사용하고자 할 때 사용됩니다.

예를 들어 다음과 같은 객체가 있다고 가정한다면,

```js
const state = {
  user: {
    id: 1,
    name: "Alice",
    email: "alice@example.com",
  },
  posts: [
    { id: 1, title: "Post 1", content: "Content 1" },
    { id: 2, title: "Post 2", content: "Content 2" },
  ],
  comments: [
    { id: 1, postId: 1, text: "Comment 1" },
    { id: 2, postId: 1, text: "Comment 2" },
  ],
};
```

여기서 state는 전체 전역 상태입니다. 하지만 특정 컴포넌트에서는 전체 상태가 아니라 user 정보만 필요할 수 있습니다. 이럴 때 **선택자(Selector)**를 사용하여 user 정보를 추출해 낼 수 있습니다.

```js
// 선택자 함수 정의
const selectUser = (state) => state.user;

// 선택자 함수를 사용하여 user 상태 가져오기
const user = selectUser(state);
console.log(user); // { id: 1, name: "Alice", email: "alice@example.com" }
```

```ts
const useStoreSelector = <T, S>(store: Store<T>, selector: (state: T) => S) => {
  // 1. `store.getState()`를 통해 현재 상태를 가져오고, `selector`로 선택된 부분만 `state`에 저장
  const [state, setState] = useState(() => selector(store.getState()));

  // 2. `useEffect`를 통해 상태 변경에 대한 구독(subscribe) 설정
  useEffect(() => {
    // 상태가 변경될 때마다 `selector`를 통해 새로운 값을 가져와 `setState`로 업데이트
    const unsubscribe = store.subscribe(() => {
      setState(selector(store.getState()));
    });

    // 상태가 변경되지 않았을 때도 `selector`를 통해 초기 상태 설정
    setState(selector(store.getState()));

    // 3. 컴포넌트가 언마운트될 때 구독 해제
    return unsubscribe;
  }, [store, selector]);

  // 4. 선택된 상태 반환
  return state;
};
```

1. 상태의 특정 부분만 선택하여 사용: selector를 사용하여 전체 상태 중 필요한 부분만 추출하고, 컴포넌트가 그 부분만 구독하도록 설정합니다.
2. 선택자 패턴을 통한 최적화: 상태의 일부분만 사용하기 때문에, 변경되지 않은 부분의 상태가 변경되더라도 컴포넌트가 불필요하게 리렌더링되지 않습니다.
3. 구독 및 해제를 통해 상태 관리: store.subscribe와 unsubscribe를 사용하여 컴포넌트가 상태 변경을 감지하고, 필요에 따라 컴포넌트가 언마운트될 때 구독을 해제하여 불필요한 업데이트를 방지합니다.

하지만, useEffect는 컴포넌트가 처음 렌더링된 이후에 실행됩니다. 따라서 다음과 같은 문제가 발생할 수 있습니다:

1. useEffect가 실행되기 전에 state가 이미 업데이트되었을 경우, 컴포넌트가 useEffect에 의해 구독(subscribe)되기 전까지는 변경된 상태를 반영하지 못합니다.
2. useEffect가 실행되기 전에 초기 상태(state)가 설정되기 때문에, state가 구독되기 전까지 이전 상태를 유지합니다.
3. 만약 상태(store)가 useEffect 실행 전과 실행 후에 변경된다면, 구독 설정 후 상태가 변경된 것을 반영하지 못할 수 있습니다.

예를 들어, useStoreSelector 훅에서 store가 구독되기 전에 상태가 이미 변경되었다면, 컴포넌트는 useEffect가 실행되기 전까지 이전 상태를 사용하게 되어 사용자에게 이전 상태 값이 표시될 수 있습니다.

이런 문제를 해결하기 이해, 리액트 팀은 use-subscription이라는 공식 훅을 제공하고 있습니다.

```ts
import { useSubscription } from "use-subscription";
import { useMemo } from "react";

// Store 객체 타입 정의
type Store<T> = {
  getState: () => T; // 현재 상태 값을 반환하는 함수
  subscribe: (callback: () => void) => () => void; // 상태 변경 시 호출될 콜백을 등록하고, 구독 해제 함수를 반환
};

// useSubscription을 이용한 useStoreSelector 훅 정의
const useStoreSelector = <T, S>(store: Store<T>, selector: (state: T) => S) => {
  // 구독 객체를 메모이제이션하여 useSubscription 훅에 전달
  const subscription = useMemo(
    () => ({
      // 현재 선택된 상태 값을 반환
      getCurrentValue: () => selector(store.getState()),

      // 상태 변경 시 호출될 콜백 함수 등록
      subscribe: (callback) => store.subscribe(callback),
    }),
    [store, selector] // store 또는 selector가 변경될 때만 구독 객체 재생성
  );

  // useSubscription 훅을 사용하여 선택된 상태를 구독하고 반환
  return useSubscription(subscription);
};

export default useStoreSelector;
```

1. 구독 로직의 단순화
   useSubscription 훅을 사용함으로써 useEffect에서 구독 및 구독 해제를 직접 설정하는 로직이 사라졌습니다.
   useSubscription은 상태 변경 시 자동으로 콜백 함수를 실행하고, 컴포넌트가 언마운트될 때 자동으로 구독을 해제합니다.

2. 상태 관리의 일관성 및 성능 최적화
   useMemo를 사용하여 subscription 객체를 메모이제이션하고, store 또는 selector가 변경될 때만 subscription 객체를 재생성합니다. 이를 통해 불필요한 구독 객체 재생성을 방지하고, 상태 관리의 일관성을 유지합니다.

3. 초기 상태 설정의 일관성 보장
   useSubscription 훅은 getCurrentValue를 사용하여 항상 최신 상태 값을 반환합니다. 이를 통해 useEffect의 지연 실행 문제를 방지하고, 초기 상태 설정 시점에서도 최신 상태 값을 사용하도록 보장합니다.
